'use client';

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Car, Zap, Fuel, Settings, Car as CarIcon } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { CarFormData } from '@/types/car';
import { predictSingleCarPrice } from '@/lib/api';
import { formatPriceWhole, formatPrice } from '@/lib/utils';
import { getAllCarBrands, getCarTypesForBrand } from '@/lib/car-data';

const carFormSchema = z.object({
  symboling: z.number().min(-3).max(3),
  carbrand: z.string().min(1, 'Car brand is required'),
  cartype: z.string().min(1, 'Car type is required'),
  fueltype: z.string().min(1, 'Fuel type is required'),
  aspiration: z.string().min(1, 'Aspiration is required'),
  doornumber: z.string().min(1, 'Door number is required'),
  carbody: z.string().min(1, 'Car body is required'),
  drivewheel: z.string().min(1, 'Drive wheel is required'),
  enginelocation: z.string().min(1, 'Engine location is required'),
  wheelbase: z.number().min(80).max(120),
  carlength: z.number().min(140).max(210),
  carwidth: z.number().min(60).max(75),
  carheight: z.number().min(45).max(60),
  curbweight: z.number().min(1500).max(4000),
  enginetype: z.string().min(1, 'Engine type is required'),
  cylindernumber: z.string().min(1, 'Cylinder number is required'),
  enginesize: z.number().min(60).max(350),
  fuelsystem: z.string().min(1, 'Fuel system is required'),
  boreratio: z.number().min(2.5).max(4.0),
  stroke: z.number().min(2.0).max(4.0),
  compressionratio: z.number().min(7).max(25),
  horsepower: z.number().min(50).max(300),
  peakrpm: z.number().min(4000).max(7000),
  citympg: z.number().min(10).max(50),
  highwaympg: z.number().min(15).max(60),
});

export function CarPredictionForm() {
  const [isLoading, setIsLoading] = useState(false);
  const [prediction, setPrediction] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [showCents, setShowCents] = useState(false);

  const {
    register,
    handleSubmit,
    setValue,
    watch,
    formState: { errors },
    reset,
  } = useForm<CarFormData>({
    resolver: zodResolver(carFormSchema),
    defaultValues: {
      symboling: 0,
      carbrand: '',
      cartype: '',
      fueltype: 'gas',
      aspiration: 'std',
      doornumber: 'two',
      carbody: 'sedan',
      drivewheel: 'fwd',
      enginelocation: 'front',
      wheelbase: 100,
      carlength: 175,
      carwidth: 65,
      carheight: 52,
      curbweight: 2500,
      enginetype: 'ohc',
      cylindernumber: 'four',
      enginesize: 120,
      fuelsystem: 'mpfi',
      boreratio: 3.5,
      stroke: 3.0,
      compressionratio: 10,
      horsepower: 100,
      peakrpm: 5000,
      citympg: 25,
      highwaympg: 30,
    },
  });

  const onSubmit = async (data: CarFormData) => {
    setIsLoading(true);
    setError(null);
    setPrediction(null);

    try {
      const carData = {
        car_ID: 1, // This will be auto-generated by the API
        ...data,
        CarName: `${data.carbrand} ${data.cartype}`, // Combine for API compatibility
      };

      const response = await predictSingleCarPrice(carData);
      setPrediction(response.predictions[0].predicted_price);
    } catch {
      setError('Failed to predict car price. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleReset = () => {
    reset();
    setPrediction(null);
    setError(null);
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Car className="h-6 w-6" />
            Car Price Prediction
          </CardTitle>
          <CardDescription>
            Enter car specifications to predict its market price using our AI model.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            {/* Basic Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">Car Brand</label>
                <Select onValueChange={(value) => setValue('carbrand', value)} defaultValue="">
                  <SelectTrigger>
                    <SelectValue placeholder="Select car brand" />
                  </SelectTrigger>
                  <SelectContent>
                    {getAllCarBrands().map((brand) => (
                      <SelectItem key={brand} value={brand}>
                        {brand.charAt(0).toUpperCase() + brand.slice(1)}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.carbrand && (
                  <p className="text-sm text-red-500">{errors.carbrand.message}</p>
                )}
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Car Type</label>
                <Select 
                  onValueChange={(value) => setValue('cartype', value)} 
                  defaultValue=""
                  disabled={!watch('carbrand')}
                >
                  <SelectTrigger>
                    <SelectValue placeholder={watch('carbrand') ? "Select car type" : "Select brand first"} />
                  </SelectTrigger>
                  <SelectContent>
                    {watch('carbrand') && getCarTypesForBrand(watch('carbrand')).map((type) => (
                      <SelectItem key={type} value={type}>
                        {type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.cartype && (
                  <p className="text-sm text-red-500">{errors.cartype.message}</p>
                )}
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Symboling</label>
                <Input
                  type="number"
                  {...register('symboling', { valueAsNumber: true })}
                  placeholder="0"
                  min="-3"
                  max="3"
                  className={errors.symboling ? 'border-red-500' : ''}
                />
                {errors.symboling && (
                  <p className="text-sm text-red-500">{errors.symboling.message}</p>
                )}
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Fuel Type</label>
                <Select onValueChange={(value) => setValue('fueltype', value)} defaultValue="gas">
                  <SelectTrigger>
                    <SelectValue placeholder="Select fuel type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="gas">Gas</SelectItem>
                    <SelectItem value="diesel">Diesel</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Engine Specifications */}
            <div className="border-t pt-6">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <Settings className="h-5 w-5" />
                Engine Specifications
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Engine Type</label>
                  <Select onValueChange={(value) => setValue('enginetype', value)} defaultValue="ohc">
                    <SelectTrigger>
                      <SelectValue placeholder="Select engine type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ohc">OHC</SelectItem>
                      <SelectItem value="ohcv">OHCV</SelectItem>
                      <SelectItem value="dohc">DOHC</SelectItem>
                      <SelectItem value="l">L</SelectItem>
                      <SelectItem value="rotor">Rotor</SelectItem>
                      <SelectItem value="ohcf">OHCF</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Cylinder Number</label>
                  <Select onValueChange={(value) => setValue('cylindernumber', value)} defaultValue="four">
                    <SelectTrigger>
                      <SelectValue placeholder="Select cylinder number" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="two">Two</SelectItem>
                      <SelectItem value="three">Three</SelectItem>
                      <SelectItem value="four">Four</SelectItem>
                      <SelectItem value="five">Five</SelectItem>
                      <SelectItem value="six">Six</SelectItem>
                      <SelectItem value="eight">Eight</SelectItem>
                      <SelectItem value="twelve">Twelve</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Engine Size</label>
                  <Input
                    type="number"
                    {...register('enginesize', { valueAsNumber: true })}
                    placeholder="120"
                    min="60"
                    max="350"
                    className={errors.enginesize ? 'border-red-500' : ''}
                  />
                  {errors.enginesize && (
                    <p className="text-sm text-red-500">{errors.enginesize.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Horsepower</label>
                  <Input
                    type="number"
                    {...register('horsepower', { valueAsNumber: true })}
                    placeholder="100"
                    min="50"
                    max="300"
                    className={errors.horsepower ? 'border-red-500' : ''}
                  />
                  {errors.horsepower && (
                    <p className="text-sm text-red-500">{errors.horsepower.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Peak RPM</label>
                  <Input
                    type="number"
                    {...register('peakrpm', { valueAsNumber: true })}
                    placeholder="5000"
                    min="4000"
                    max="7000"
                    className={errors.peakrpm ? 'border-red-500' : ''}
                  />
                  {errors.peakrpm && (
                    <p className="text-sm text-red-500">{errors.peakrpm.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Compression Ratio</label>
                  <Input
                    type="number"
                    step="0.1"
                    {...register('compressionratio', { valueAsNumber: true })}
                    placeholder="10.0"
                    min="7"
                    max="25"
                    className={errors.compressionratio ? 'border-red-500' : ''}
                  />
                  {errors.compressionratio && (
                    <p className="text-sm text-red-500">{errors.compressionratio.message}</p>
                  )}
                </div>
              </div>
            </div>

            {/* Dimensions */}
            <div className="border-t pt-6">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <CarIcon className="h-5 w-5" />
                Dimensions
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Wheelbase (inches)</label>
                  <Input
                    type="number"
                    step="0.1"
                    {...register('wheelbase', { valueAsNumber: true })}
                    placeholder="100.0"
                    min="80"
                    max="120"
                    className={errors.wheelbase ? 'border-red-500' : ''}
                  />
                  {errors.wheelbase && (
                    <p className="text-sm text-red-500">{errors.wheelbase.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Car Length (inches)</label>
                  <Input
                    type="number"
                    step="0.1"
                    {...register('carlength', { valueAsNumber: true })}
                    placeholder="175.0"
                    min="140"
                    max="210"
                    className={errors.carlength ? 'border-red-500' : ''}
                  />
                  {errors.carlength && (
                    <p className="text-sm text-red-500">{errors.carlength.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Car Width (inches)</label>
                  <Input
                    type="number"
                    step="0.1"
                    {...register('carwidth', { valueAsNumber: true })}
                    placeholder="65.0"
                    min="60"
                    max="75"
                    className={errors.carwidth ? 'border-red-500' : ''}
                  />
                  {errors.carwidth && (
                    <p className="text-sm text-red-500">{errors.carwidth.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Car Height (inches)</label>
                  <Input
                    type="number"
                    step="0.1"
                    {...register('carheight', { valueAsNumber: true })}
                    placeholder="52.0"
                    min="45"
                    max="60"
                    className={errors.carheight ? 'border-red-500' : ''}
                  />
                  {errors.carheight && (
                    <p className="text-sm text-red-500">{errors.carheight.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Curb Weight (lbs)</label>
                  <Input
                    type="number"
                    {...register('curbweight', { valueAsNumber: true })}
                    placeholder="2500"
                    min="1500"
                    max="4000"
                    className={errors.curbweight ? 'border-red-500' : ''}
                  />
                  {errors.curbweight && (
                    <p className="text-sm text-red-500">{errors.curbweight.message}</p>
                  )}
                </div>
              </div>
            </div>

            {/* Additional Specifications */}
            <div className="border-t pt-6">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <Zap className="h-5 w-5" />
                Additional Specifications
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Aspiration</label>
                  <Select onValueChange={(value) => setValue('aspiration', value)} defaultValue="std">
                    <SelectTrigger>
                      <SelectValue placeholder="Select aspiration" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="std">Standard</SelectItem>
                      <SelectItem value="turbo">Turbo</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Door Number</label>
                  <Select onValueChange={(value) => setValue('doornumber', value)} defaultValue="two">
                    <SelectTrigger>
                      <SelectValue placeholder="Select door number" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="two">Two</SelectItem>
                      <SelectItem value="four">Four</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Car Body</label>
                  <Select onValueChange={(value) => setValue('carbody', value)} defaultValue="sedan">
                    <SelectTrigger>
                      <SelectValue placeholder="Select car body" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="sedan">Sedan</SelectItem>
                      <SelectItem value="hatchback">Hatchback</SelectItem>
                      <SelectItem value="wagon">Wagon</SelectItem>
                      <SelectItem value="hardtop">Hardtop</SelectItem>
                      <SelectItem value="convertible">Convertible</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Drive Wheel</label>
                  <Select onValueChange={(value) => setValue('drivewheel', value)} defaultValue="fwd">
                    <SelectTrigger>
                      <SelectValue placeholder="Select drive wheel" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="fwd">Front Wheel Drive</SelectItem>
                      <SelectItem value="rwd">Rear Wheel Drive</SelectItem>
                      <SelectItem value="4wd">4 Wheel Drive</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Engine Location</label>
                  <Select onValueChange={(value) => setValue('enginelocation', value)} defaultValue="front">
                    <SelectTrigger>
                      <SelectValue placeholder="Select engine location" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="front">Front</SelectItem>
                      <SelectItem value="rear">Rear</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Fuel System</label>
                  <Select onValueChange={(value) => setValue('fuelsystem', value)} defaultValue="mpfi">
                    <SelectTrigger>
                      <SelectValue placeholder="Select fuel system" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="mpfi">MPFI</SelectItem>
                      <SelectItem value="2bbl">2BBL</SelectItem>
                      <SelectItem value="mfi">MFI</SelectItem>
                      <SelectItem value="1bbl">1BBL</SelectItem>
                      <SelectItem value="spfi">SPFI</SelectItem>
                      <SelectItem value="4bbl">4BBL</SelectItem>
                      <SelectItem value="idi">IDI</SelectItem>
                      <SelectItem value="spdi">SPDI</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>

            {/* Engine Measurements */}
            <div className="border-t pt-6">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <Fuel className="h-5 w-5" />
                Engine Measurements
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Bore Ratio</label>
                  <Input
                    type="number"
                    step="0.01"
                    {...register('boreratio', { valueAsNumber: true })}
                    placeholder="3.50"
                    min="2.5"
                    max="4.0"
                    className={errors.boreratio ? 'border-red-500' : ''}
                  />
                  {errors.boreratio && (
                    <p className="text-sm text-red-500">{errors.boreratio.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Stroke</label>
                  <Input
                    type="number"
                    step="0.01"
                    {...register('stroke', { valueAsNumber: true })}
                    placeholder="3.00"
                    min="2.0"
                    max="4.0"
                    className={errors.stroke ? 'border-red-500' : ''}
                  />
                  {errors.stroke && (
                    <p className="text-sm text-red-500">{errors.stroke.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">City MPG</label>
                  <Input
                    type="number"
                    {...register('citympg', { valueAsNumber: true })}
                    placeholder="25"
                    min="10"
                    max="50"
                    className={errors.citympg ? 'border-red-500' : ''}
                  />
                  {errors.citympg && (
                    <p className="text-sm text-red-500">{errors.citympg.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Highway MPG</label>
                  <Input
                    type="number"
                    {...register('highwaympg', { valueAsNumber: true })}
                    placeholder="30"
                    min="15"
                    max="60"
                    className={errors.highwaympg ? 'border-red-500' : ''}
                  />
                  {errors.highwaympg && (
                    <p className="text-sm text-red-500">{errors.highwaympg.message}</p>
                  )}
                </div>
              </div>
            </div>

            {/* Form Actions */}
            <div className="flex flex-col sm:flex-row gap-4 pt-6">
              <Button
                type="submit"
                disabled={isLoading}
                className="flex-1 bg-blue-600 hover:bg-blue-700"
              >
                {isLoading ? 'Predicting...' : 'Predict Price'}
              </Button>
              <Button
                type="button"
                variant="outline"
                onClick={handleReset}
                className="flex-1"
              >
                Reset Form
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>

      {/* Prediction Result */}
      {prediction && (
        <Card className="border-green-200 bg-green-50 dark:bg-green-950 dark:border-green-800">
          <CardHeader>
            <CardTitle className="text-green-800 dark:text-green-200">
              Prediction Result
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center">
              <p className="text-3xl font-bold text-green-600 dark:text-green-400">
                {showCents ? formatPrice(prediction) : formatPriceWhole(prediction)}
              </p>
              <p className="text-sm text-green-600 dark:text-green-400 mt-2">
                Estimated Market Price
              </p>
              <div className="mt-4">
                <label className="flex items-center gap-2 text-sm text-green-600 dark:text-green-400 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={showCents}
                    onChange={(e) => setShowCents(e.target.checked)}
                    className="rounded border-green-300 text-green-600 focus:ring-green-500"
                  />
                  Show cents
                </label>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Error Message */}
      {error && (
        <Card className="border-red-200 bg-red-50 dark:bg-red-950 dark:border-red-800">
          <CardContent className="pt-6">
            <p className="text-red-600 dark:text-red-400 text-center">{error}</p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
